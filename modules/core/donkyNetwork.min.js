/*!
 * DonkyNetwork JavaScript Library
 *
 * Copyright (C) Donky Networks Ltd. All rights reserved.
 *
 */
;var DonkyNetwork=(function(){var m={checkSynchroniseInterval:1000*10,maxSecondsWithoutSynchronize:5*60,retrySchedule:[5000,5000,30000,30000,60000,120000,300000,300000,300000,300000,300000,300000,300000,300000,300000,600000,600000,600000,600000,600000,600000,900000]};var a;var h=null;var f=0;b.prototype.api={anonymous:"client-api.mobiledonky.com/api/",secure:"client-secure-api-northeurope.mobiledonky.com/api/"};var d={initializing:0,starting:1,started:2,stopping:3,stopped:4,error:5};b.prototype.signalrStatuses=d;var p=false;var o=undefined;var c=false;var r=undefined;var s=undefined;var k=false;var l=d.stopped;var i=null;var g=null;var j=false;var n=true;var q=null;function e(){if(h.donkyAccount.isRegistered()&&!h.donkyAccount._isSuspended()){var t=h.donkyData.get("lastSynchroniseTime");if(t!==null){var u=new Date(t);var v=h._dateDiff(u,new Date());if(v.seconds>m.maxSecondsWithoutSynchronize){a.synchronise()}}else{a.synchronise()}}}function b(u){if(typeof a!="undefined"){return a}if(u===undefined||u===null){throw new Error("no options specified")}if(u.donkyCore===undefined){throw new Error("donkyCore not specified")}h=u.donkyCore;if(window.jQuery===undefined){throw new Error("jQuery not found")}if(h._versionCompare($.fn.jquery,"1.7")<0){throw new Error("jQuery varsion too old - require minimum version of 1.7")}if(window.$.signalR===undefined){throw new Error("jQuery not found")}if(h._versionCompare(window.$.signalR.version,"2.2.0")<0){throw new Error("signalR varsion too old - require minimum version of 2.2.0")}a=this;if(n){h.subscribeToLocalEvent("RegistrationChanged",function(x){if(l==d.initializing||l==d.starting||l==d.started){a._stopSignalR(function(){a._startSignalR()})}});h.subscribeToLocalEvent("DonkyInitialised",function(x){if(!k){a._initSignalR()}else{if(l==d.stopped){a._startSignalR()}}if(q===null){q=setInterval(function(){e()},m.checkSynchroniseInterval)}})}var w=h.donkyData.get("configuration");if(w!==null&&w!==undefined&&w.configurationItems!==undefined){if(typeof w.configurationItems.DeviceCommsConnectionRetrySchedule=="string"){var t=w.configurationItems.DeviceCommsConnectionRetrySchedule.split("|");var v=[];h._each(t,function(y,A){var C=A.split(",");if(C.length==2){var x=parseInt(C[0]);var B=C[1]==="*"?1:parseInt(C[1]);for(var z=0;z<B;z++){v.push(x*1000)}}});m.retrySchedule=v}if(n&&typeof w.configurationItems.MaxMinutesWithoutNotificationExchange=="string"){m.maxSecondsWithoutSynchronize=parseInt(w.configurationItems.MaxMinutesWithoutNotificationExchange)*60}}return a}b.prototype.ajax=function(v,u,t,y,x){try{a._ajax(v,u,t,y,function(A){if(A.succeeded){f=0;x(A)}else{var z=true;if(h.donkyAccount._isSuspended()||!h.donkyAccount.isRegistered()){z=false}else{switch(A.statusCode){case 401:if(y!=="authentication/gettoken"){z=false;h.donkyAccount._refreshToken(function(B){if(B.succeeded){h.donkyLogging.debugLog("Retrying ajax call after getting a new token");a.ajax(v,u,t,y,x)}})}else{z=false}break;case 400:case 403:case 404:z=false;default:break}}if(z){h.donkyLogging.debugLog("Retrying ajax call in "+m.retrySchedule[f]+" ms - retryCounter = "+f);setTimeout(function(){a.ajax(v,u,t,y,x)},m.retrySchedule[f]);if(f<m.retrySchedule.length-1){f++}}else{x(A)}}})}catch(w){h.donkyLogging.errorLog("caught exception in ajax() : "+w);x({succeeded:false,statusCode:-1})}};b.prototype._ajax=function(x,A,z,t,B){var v={donkyClientSystemIdentifier:"DonkyWebModularSdk"};if(z===a.api.secure){v.authorization=h.donkyNetwork._getAuthorizationHeader()}else{v.apiKey=h.donkyData.get("apiKey")}var y=h.donkyData.get("environment");var u=h.donkyData.get("scheme");var w=$.ajax({url:u+y+z+t,type:A,beforeSend:function(C){if(v!==null){h._each(v,function(D,E){C.setRequestHeader(D,E)})}},contentType:"application/json",data:x!==null?JSON.stringify(x):undefined,dataType:"json"}).done(function(C){if(C!==null&&C!==undefined){h.donkyLogging.debugLog(JSON.stringify(C))}B({succeeded:true,response:C})}).fail(function(F,C,H){if(F.readyState==4){var I;var D=null;var E=F.statusCode();switch(E.status){case 400:try{D=JSON.parse(E.responseText)}catch(G){h.donkyLogging.warnLog("failed to parse responseText: "+E.responseText)}I=A+" to  "+z+t+" returned a "+E.status+" (Bad request)\nrequest: "+JSON.stringify(x)+"\nheaders: "+JSON.stringify(v)+"\nresponse: "+JSON.stringify(D);h.donkyLogging.warnLog(I);break;default:I=A+" to  "+z+t+" returned a "+E.status+"\nrequest: "+JSON.stringify(x)+"\nheaders: "+JSON.stringify(v)+"\nresponse: "+E.responseText;h.donkyLogging.warnLog(I);break}B({succeeded:false,response:D,statusCode:E.status})}else{I=A+" to  "+z+t+" failed ("+C+")\nrequest: "+JSON.stringify(x)+"\nheaders: "+JSON.stringify(v);h.donkyLogging.warnLog(I);B({succeeded:false,statusCode:-1})}})};b.prototype._initSignalR=function(){if(i==null){l=d.initializing;var t=h.donkyData.get("accessDetails");i=$.hubConnection(t.signalRUrl,{useDefaultPath:false});i.qs={access_token:t.accessToken};if(h.donkyLogging._getLogLevel()>=h.donkyLogging.logLevel.Info){i.logging=true}i.stateChanged(function(u){switch(u.newState){case $.signalR.connectionState.connecting:h.donkyLogging.debugLog("The server is connecting");l=d.starting;break;case $.signalR.connectionState.connected:h.donkyLogging.debugLog("The server is connected");l=d.started;break;case $.signalR.connectionState.reconnecting:h.donkyLogging.debugLog("The server is reconnecting");l=d.starting;break;case $.signalR.connectionState.disconnected:h.donkyLogging.debugLog("The server is disconnected");l=d.stopped;break}});g=i.createHubProxy("NetworkHub");g.on("push",function(u){h.donkyLogging.debugLog("Push was called with notifications: "+JSON.stringify(u));h._processServerNotifications(u);if(n){a._synchroniseOverSignalR()}else{a._synchronizeOverREST()}});k=true;a._startSignalR()}else{h.donkyLogging.warnLog("_signalR.init() called twice")}};b.prototype._isSignalRStarted=function(){return l==d.started};b.prototype._getSignalRState=function(){return l};b.prototype._useSignalR=function(t){n=t};b.prototype._startSignalR=function(u){if(i!=null){var t=h.donkyData.get("accessDetails");switch(l){case d.initializing:case d.stopped:i.qs={access_token:t.accessToken};l=d.starting;i.start().done(function(){l=d.started;if(h._isFunction(u)){u()}a._synchroniseOverSignalR(function(){h.publishLocalEvent({type:"SignalRStarted",data:{}});if(s!==undefined){h.donkyLogging.debugLog("syncWhenStartingCallback registered, calling ...");s();s=undefined}if(p===true){h.donkyLogging.debugLog("Entered the started state and found a stop request. stopping ...");p=false;a._stopSignalR(o);o=undefined}})}).fail(function(v){l=d.stopped;h.donkyLogging.warnLog("Connection error: "+v);a._synchronizeOverREST(function(){if(s!==undefined){h.donkyLogging.debugLog("syncWhenStartingCallback registered, calling ...");s();s=undefined}})});break;case d.started:if(h._isFunction(u)){u()}h.donkyLogging.warnLog("_startSignalR() called when already started");break;case d.starting:h.donkyLogging.warnLog("_startSignalR() called when starting");break;case d.stopping:h.donkyLogging.debugLog("_startSignalR() called when stopping - requesting a start when stopped");c=true;r=u;break;default:h.donkyLogging.errorLog("Unknown signalR status: "+l);break}}else{h.donkyLogging.warnLog("_startSignalR() called when not initialized")}};b.prototype._stopSignalR=function(t){if(i!=null){switch(l){case d.started:i.stop();l=d.stopped;h.publishLocalEvent({type:"SignalRStopped",data:{}});if(h._isFunction(t)){t()}if(c===true){h.donkyLogging.debugLog("Entered the stopped state and found a start request. starting ...");c=false;a._startSignalR(r);r=undefined}break;case d.stopped:h.donkyLogging.warnLog("_stopSignalR() called when already stopped");if(h._isFunction(t)){t()}break;case d.stopping:h.donkyLogging.warnLog("_stopSignalR() called when already stopping");break;case d.starting:case d.initializing:h.donkyLogging.debugLog("_stopSignalR() called when initializing / starting  - requesting a stop when started");p=true;o=t;break;default:h.donkyLogging.errorLog("Unknown signalR status: "+l);break}}else{h.donkyLogging.warnLog("_stopSignalR() called when not initialized")}};b.prototype._synchroniseOverSignalR=function(u){if(l==d.started){var t=h._getClientNotificationsToExecute();h.donkyLogging.debugLog("invoking synchronise: "+JSON.stringify(t));j=true;h._processPendingClientNotifications(t);g.invoke("synchronise",t).done(function(v){j=false;h.donkyLogging.infoLog("Call to synchronise succeeded, result was: "+JSON.stringify(v));h._processServerNotifications(v.serverNotifications);if(h._isArray(v.failedClientNotifications)&&v.failedClientNotifications.length>0){h.donkyLogging.warnLog("Exchange returnewd some failed client notifications: "+JSON.stringify(v.failedClientNotifications))}h.donkyData.remove("ExecutingClientNotifications");if(h._isPendingNotifications()){h.donkyLogging.infoLog("_processServerNotifications() generated some pending client notifications, sending now ...");a._synchroniseOverSignalR(u)}else{if(h._isFunction(u)){u({succeeded:true,response:v})}}}).fail(function(v){j=false;l=d.stopped;h.donkyLogging.errorLog("Call to synchronise failed: "+v);if(h._isFunction(u)){u({succeeded:false})}})}else{h.donkyLogging.warnLog("signalR not initialized so can't synchronise over this channel")}};b.prototype._synchronizeOverREST=function(u){if(j){h.donkyLogging.warnLog("synchronize called when already synchronizing");return}var t={clientNotifications:h._getClientNotificationsToExecute(),isBackground:true};j=true;h._processPendingClientNotifications(t.clientNotifications);this.ajax(t,"POST",this.api.secure,"notification/synchronise",function(v){j=false;if(v.succeeded){h.donkyLogging.debugLog("Call to synchronise succeeded, result was: "+JSON.stringify(v));h._processServerNotifications(v.response.serverNotifications);if(h._isArray(v.response.failedClientNotifications)&&v.response.failedClientNotifications.length>0){h.donkyLogging.warnLog("Exchange returnewd some failed client notifications: "+JSON.stringify(v.response.failedClientNotifications))}h.donkyData.remove("ExecutingClientNotifications");if(h._isPendingNotifications()){a._synchronizeOverREST(u)}else{if(h._isFunction(u)){u(v)}}}else{j=false;h.donkyLogging.errorLog("Call to synchronise failed, result was: "+JSON.stringify(v));if(h._isFunction(u)){u(v)}}})};b.prototype.synchronise=function(x){try{h.donkyData.set("lastSynchroniseTime",new Date().valueOf());var w=h.donkyData.get("configuration");var v=parseInt(w.configurationItems.SignalRMaxMessageSizeBytes);var t=h._getPendingNotificationsLength();if(t<v&&n){if(l==d.initializing||l==d.starting){s=x}else{if(l==d.started){a._synchroniseOverSignalR(x)}else{a._synchronizeOverREST(x)}}}else{a._synchronizeOverREST(x)}}catch(u){h.donkyLogging.errorLog("caught exception in synchronise() : "+u);x()}};b.prototype.getServerNotification=function(v,t){try{if(!h._isFunction(t)){throw new Error("resultHandler not supplied")}this.ajax(null,"GET",this.api.secure,"notification/"+v,function(w){if(w.succeeded){t(w.response)}else{h.donkyLogging.warnLog("Failed to get Server Notification: "+v);t(null)}})}catch(u){h.donkyLogging.errorLog("caught exception in getServerNotification() : "+u);t(null)}};b.prototype._getAuthorizationHeader=function(){var t=h.donkyData.get("accessDetails");return t!==null?t.tokenType+" "+t.accessToken:""};return b})();